{"version":3,"sources":["Api.js","Home.js","Series.js","NewSeries.js","EditSeries.js","App.js","serviceWorker.js","index.js"],"names":["api","axios","create","baseURL","apis","loadGenres","get","saveSeries","newSeries","post","updateSeries","series","put","concat","id","loadSeriesByGenre","genre","deleteSeriess","delete","loadSeriesById","Home","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","genres","isLoading","_this2","setState","then","res","data","react_default","a","createElement","key","name","react_router_dom","to","className","src","map","renderGenreLink","Component","statuses","watched","watching","toWatch","Series","renderSeries","bind","assertThisInitialized","loadData","match","params","console","log","_this3","_this4","alt","status","onClick","deleteSeries","length","NewSeries","redirect","refs","value","comments","react_router","type","ref","keys","EditSeries","JSON","stringify","About","App","role","href","height","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a173fa7f.chunk.js","sourcesContent":["import axios from 'axios'\n\nconst api = axios.create({\n    baseURL: 'http://localhost:8080/'\n})\n\nexport const loadGenres = () => api.get('genres')\nexport const saveSeries = (newSeries) => api.post('series', newSeries)\nexport const updateSeries = (series) => api.put(`series/${series.id}`, series)\nexport const loadSeriesByGenre = (genre) => api.get(`series/${genre}`)\nexport const deleteSeriess = (id) => api.delete(`series/${id}`)\nexport const loadSeriesById = (id) => api.get(`series/id/${id}`)\n\nconst apis = {\n    loadGenres,\n    saveSeries,\n    updateSeries,\n    loadSeriesByGenre,\n    deleteSeriess,\n    loadSeriesById\n}\n\nexport default apis\n","import React, { Component } from 'react'\nimport { Link } from 'react-router-dom'\n\n\nimport api from './Api'\n\nclass Home extends Component {\n    constructor(props){\n        super(props)\n    \n        this.state = {\n          genres: [],\n          isLoading: false\n        }\n    }\n    componentDidMount(){\n        this.setState({ isLoading: true })\n        api.loadGenres()\n          .then((res) => {\n            this.setState({\n              isLoading: false,\n              genres: res.data\n            })\n          })\n          \n    }    \n    renderGenreLink(genre) {\n        return (\n          <span key={genre.name}>&nbsp;<Link to={`/series/${genre.name}`}>{genre.name}</Link>&nbsp;</span>\n        )\n    }\n    render() {\n        return (\n            <div>          \n                <section id=\"intro\" className=\"intro-section\">\n                <div className=\"container\">\n                    <div className=\"row\">\n                    <div className=\"col-lg-12\">\n                        <h1><img src=\"/images/logo.png\" /></h1>\n                        <p>Nunca mais esqueça uma série que você assistiu ou que alguém lhe indicou.</p>\n                    </div>\n                    </div>\n                </div>\n                </section>\n\n                <section>\n                {\n                    this.state.isLoading &&\n                    <span>Aguarde, carregando...</span>\n                }\n                {\n                    !this.state.isLoading &&\n                    <div>\n                    Ver séries do genêro: { this.state.genres.map(this.renderGenreLink)}\n                    </div>\n                }\n                </section>\n            </div>\n        )\n    }\n}\n\nexport default Home\n","import React, { Component } from 'react'\nimport { Link } from 'react-router-dom'\n\nimport api from './Api'\n\nconst statuses = {\n    'watched': 'Assistido',\n    'watching': 'Assistindo',\n    'toWatch': 'Assitir'\n}\n\nclass Series extends Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            isLoading: false,\n            series: []\n        }\n\n        this.renderSeries = this.renderSeries.bind(this)\n        this.loadData = this.loadData.bind(this)\n    }\n    componentDidMount(){\n        this.loadData()\n    }\n    loadData() {\n        this.setState({ isLoading: true })\n        api.loadSeriesByGenre(this.props.match.params.genre).then((res) => {\n            console.log(res)\n            this.setState({\n                isLoading: false,\n                series: res.data\n            })\n        })\n    }\n    deleteSeries(id) {\n        api.deleteSeriess(id).then((res) => {\n            this.loadData()\n        })\n    }\n    renderSeries(series) {\n        return (\n            <div key={series.id} className=\"item  col-xs-4 col-lg-4\">\n                <div className=\"thumbnail\">\n                    <img className=\"group list-group-image\" src=\"http://placehold.it/400x250/000/fff\" alt=\"\" />\n                    <div className=\"caption\">\n                        <h4 className=\"group inner list-group-item-heading\">\n                        {series.name}</h4>\n                        <div className=\"row\">\n                            <div className=\"col-xs-12 col-md-6\">\n                                <p className=\"lead\">{ series.genre } / { statuses[series.status] }</p>\n                            </div>\n                            <div className=\"col-xs-12 col-md-6\">\n                                <Link className=\"btn btn-success\" to={`/series-edit/${series.id}`}>Editar</Link>\n                                <a className=\"btn btn-danger\" onClick={() => this.deleteSeries(series.id)}>Excluir</a>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n    render() {\n        return (\n            <section id=\"intro\" className=\"intro-section\">\n                <h1>Séries {this.props.match.params.genre}</h1>\n                { \n                    this.state.isLoading &&\n                    <p>Carregando, aguarde... </p> \n                }\n                {\n                    this.state.series.length === 0 &&\n                    <div className='alert alert-info'>Nenhuma série cadastrada.</div>\n                }\n                <div id=\"series\" className=\"row list-group\">\n                    { !this.state.isLoading && \n                      this.state.series.map(this.renderSeries)}\n                </div>\n            </section>\n        )\n    }\n}\n\nexport default Series","import React, { Component } from 'react'\nimport { Redirect } from 'react-router-dom'\n\nimport api from './Api'\n\nconst statuses = {\n    'watched': 'Assistido',\n    'watching': 'Assistindo',\n    'toWatch': 'Assitir'\n}\n\nclass NewSeries extends Component {\n    constructor(props){\n        super(props)\n    \n        this.state = {\n          genres: [],\n          isLoading: false,\n          redirect: false\n        }\n        this.saveSeries = this.saveSeries.bind(this)\n    }\n    componentDidMount(){\n        this.setState({ isLoading: true })\n        api.loadGenres()\n          .then((res) => {\n            console.log(res.data[0].name)\n            this.setState({\n              isLoading: false,\n              genres: res.data\n            })\n          })\n          \n    }  \n    saveSeries() {\n        const newSeries = {\n            'name': this.refs.name.value,\n            'status': this.refs.status.value,\n            'genre': this.refs.genre.value,\n            'comments': this.refs.comments.value\n        }\n        api.saveSeries(newSeries).then((res) => {\n            this.setState({ \n                redirect: '/series/'+this.refs.genre.value \n            })\n        })\n    }  \n    render() {\n        return (            \n            <section id=\"intro\" className=\"intro-section\">\n                { this.state.redirect &&\n                    <Redirect to={this.state.redirect} />\n                }\n                <h1>Nova Série</h1>\n                <form>\n                    Nome: <input type='text' ref='name' className='form-control' /> <br/>\n                    Status: \n                    <select ref='status' className='form-control'>\n                        { \n                            Object\n                                .keys(statuses)\n                                .map( key => <option key={key} value={key}>{statuses[key]}</option>)}\n                    </select><br/>\n                    Gênero: \n                    <select ref='genre' className='form-control'>\n                        { \n                            this.state.genres\n                                .map( key => <option key={key.name} value={key.name}>{key.name}</option>)}\n                    </select><br/>\n                    Comentário: <textarea ref='comments' className='form-control'></textarea> <br/>          \n                    <button type=\"button\" onClick={this.saveSeries}>Salvar</button>\n                </form>\n            </section>\n        )\n    }\n}\n\nexport default NewSeries\n","import React, { Component } from 'react'\nimport { Redirect } from 'react-router-dom'\n\nimport api from './Api'\n\nconst statuses = {\n    'watched': 'Assistido',\n    'watching': 'Assistindo',\n    'toWatch': 'Assitir'\n}\n\nclass EditSeries extends Component {\n    constructor(props){\n        super(props)\n    \n        this.state = {\n          genres: [],\n          isLoading: false,\n          redirect: false,\n          series: {}\n        }\n        this.saveSeries = this.saveSeries.bind(this)\n    }\n    componentDidMount(){\n        this.setState({ isLoading: true })\n        api.loadSeriesById(this.props.match.params.id)\n            .then((res) => {\n                this.setState({ series: res.data[0] })\n                this.refs.name.value = this.state.series.name\n                this.refs.genre.value = this.state.series.genre\n                this.refs.status.value = this.state.series.status\n                this.refs.comments.value = this.state.series.comments           \n            })\n            \n        api.loadGenres()\n            .then((res) => {\n                this.setState({\n                    isLoading: false,\n                    genres: res.data\n                })\n            })\n          \n    }  \n    saveSeries() {\n        const newSeries = {\n            'id': this.props.match.params.id,\n            'name': this.refs.name.value,\n            'status': this.refs.status.value,\n            'genre': this.refs.genre.value,\n            'comments': this.refs.comments.value\n        }\n        api.updateSeries(newSeries).then((res) => {\n            this.setState({ \n                redirect: '/series/'+this.refs.genre.value \n            })\n        })\n    }  \n    render() {\n        return (            \n            <section id=\"intro\" className=\"intro-section\">\n                {JSON.stringify(this.state.series)}\n                { this.state.redirect &&\n                    <Redirect to={this.state.redirect} />\n                }\n                <h1>Editar Série</h1>\n                <form>\n                    Nome: <input type='text' ref='name' className='form-control' /> <br/>\n                    Status: \n                    <select ref='status' className='form-control'>\n                        { \n                            Object\n                                .keys(statuses)\n                                .map( key => <option key={key} value={key}>{statuses[key]}</option>)}\n                    </select><br/>\n                    Gênero: \n                    <select ref='genre' className='form-control'>\n                        { \n                            this.state.genres\n                                .map( key => <option key={key.name} value={key.name}>{key.name}</option>)}\n                    </select><br/>\n                    Comentário: <textarea ref='comments' className='form-control'></textarea> <br/>          \n                    <button type=\"button\" onClick={this.saveSeries}>Salvar</button>\n                </form>\n            </section>\n        )\n    }\n}\n\nexport default EditSeries\n","import React, { Component } from 'react'\nimport {\n  BrowserRouter as Router,\n  Route,\n  Link\n} from 'react-router-dom'\n\nimport Home from './Home'\nimport Series from './Series'\nimport NewSeries from './NewSeries'\nimport EditSeries from './EditSeries';\n\n//functional-stateless-component\nconst About = () => <h1 className=\"intro-section\">Sobre</h1>\n\nclass App extends Component {\n  render() {\n    return (   \n        <Router>     \n          <div>\n            <nav className=\"navbar navbar-default navbar-fixed-top\" role=\"navigation\">\n              <div className=\"container\">\n                <div className=\"navbar-header page-scroll\">\n                  <a className=\"navbar-brand page-scroll\" href=\"#page-top\">\n                      <img src=\"images/logo.png\" height=\"30\" />\n                  </a>\n                </div>\n          \n                <div className=\"collapse navbar-collapse navbar-ex1-collapse\">\n                  <ul className=\"nav navbar-nav\">\n                    <li>\n                      <Link to='/'>Home</Link>\n                    </li>\n                    <li>\n                      <Link to='/new'>Nova Série</Link>\n                    </li>\n                    <li>\n                      <Link to='/about'>Sobre</Link>\n                    </li>\n                  </ul>\n                </div>\n          \n              </div>\n            </nav> \n            <Route exact path='/' component={Home} />\n            <Route path='/series-edit/:id' component={EditSeries} />\n            <Route path='/series/:genre' component={Series} />            \n            <Route exact path='/new' component={NewSeries} />\n            <Route exact path='/about' component={About} />                 \n          </div>   \n        </Router>       \n      )\n    }\n  \n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}